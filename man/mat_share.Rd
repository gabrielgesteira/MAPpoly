% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/haplotype_map_utils.R
\name{mat_share}
\alias{mat_share}
\title{Return the number of shared homologous chromosomes between all markers in two
marker blocks, represented by two objects of type \code{mappoly.map}}
\usage{
mat_share(x1, x2, twopt, ph1 = "best", ph2 = "best",
  count.cache = NULL, thres)
}
\arguments{
\item{x1}{first object of class \code{mappoly.map}}

\item{x2}{second object of class \code{mappoly.map}}

\item{ph1}{a vector of integers indicating the position of the linkage phase
configuration for \code{x1}. If \code{NULL}, it uses the position with
maximum likelihood.}

\item{ph2}{a vector of integers indicating the position of the linkage phase
configuration for \code{x2}. If \code{NULL}, it uses the position with
maximum likelihood.}

\item{count.cache}{an object of class \code{cache.info} containing
pre-computed genotype frequencies, obtained with
\code{\link[mappoly]{cache_counts_twopt}}.}

\item{thres}{LOD score threshold for linkage phase configuration.}
}
\description{
Return the number of shared homologous chromosomes between all markers in two
marker blocks, represented by two objects of type \code{mappoly.map}
}
\examples{
  \dontrun{
  data(hexafake)
  mrk.subset<-make_seq_mappoly(hexafake, 1:50)
  red.mrk<-elim_redundant(mrk.subset)
  unique.mrks<-make_seq_mappoly(red.mrk)
  counts.web<-cache_counts_twopt(unique.mrks, get.from.web = TRUE)
  subset.pairs<-est_pairwise_rf(input.seq = unique.mrks,
                                count.cache = counts.web)
  subset.map <- est_rf_hmm_sequential(input.seq = unique.mrks,
                                      thres.twopt = 5,
                                      thres.hmm = 10,
                                      extend.tail = 10,
                                      tol = 0.1,
                                      tol.final = 10e-3,
                                      twopt = subset.pairs,
                                      verbose = TRUE,
                                      high.prec = FALSE)
                                      
  s1 <- make_seq_mappoly(hexafake, unique.mrks$seq.mrk.names[1:25])                                     
  map1 <- est_rf_hmm_sequential(input.seq = s1,
                                thres.twopt = 5,
                                thres.hmm = 10,
                                extend.tail = 10,
                                tol = 0.01,
                                tol.final = 10e-3,
                                twopt = subset.pairs,
                                verbose = TRUE,
                                high.prec = FALSE)
                                
  s2 <- make_seq_mappoly(hexafake, unique.mrks$seq.mrk.names[26:47])                                     
  map2 <- est_rf_hmm_sequential(input.seq = s2,
                                thres.twopt = 5,
                                thres.hmm = 10,
                                extend.tail = 10,
                                tol = 0.01,
                                tol.final = 10e-3,
                                twopt = subset.pairs,
                                verbose = TRUE,
                                high.prec = FALSE)
   twopt.sub <- make_pairs_mappoly(subset.pairs, 
                                   make_seq_mappoly(hexafake, 
                                                    c(map1$maps[[1]]$seq.num, 
                                                      map2$maps[[1]]$seq.num)))           
   M<-mat_share(map1,
                map2,
                twopt,
                count.cache = counts.web,
                thres = -1)
   M
   }

}
\author{
Marcelo Mollinari, \email{mmollin@ncsu.edu}
}
\keyword{internal}
