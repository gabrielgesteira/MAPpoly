% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_marker_blocks.R
\name{find_marker_blocks}
\alias{find_marker_blocks}
\alias{print.mappoly.bins}
\alias{plot.mappoly.bins}
\title{Allocate markers into blocks}
\usage{
find_marker_blocks(input.seq, search.type = c("rf", "seq", "orig.ord"),
  rf.limit = 1e-04, seq.limit = 1000, ord.limit = 10,
  reconstruct = FALSE, extend.tail = 10, n.clusters = 1,
  ph.thres = 3, rf.mat = NULL, tol = 0.001, tol.final = 1e-04,
  error = NULL, verbose = TRUE, count.cache, ask = FALSE)

\method{print}{mappoly.bins}(x, ...)

\method{plot}{mappoly.bins}(x, rf.thres = NULL, ...)
}
\arguments{
\item{input.seq}{an object of class \code{mappoly.sequence}.}

\item{search.type}{one of \code{'rf'} or \code{'seq'}. If
\code{'rf'}, the search for bins is performed using the
recombination fraction estimates at a certain level given by
the argument \code{rf.limit}. If \code{'seq'}, the search for
bins is performed using the sequence information contained in
the input file. It uses as threshold to assume the markers are
at the same bin the argument \code{seq.limit}}

\item{rf.limit}{the maximum value to consider linked markers in
case of \code{'search.type=rf'}}

\item{seq.limit}{the distance limit to be considered when allocating
markers into bins in case of \code{'search.type=seq'}}

\item{reconstruct}{if \code{TRUE}, reconstructs the genetic map in
each bin. If \code{FALSE}, assume all recombination fractions
in the bin equal to zero. Only makes effect if
\code{search.type = 'seq'}. When \code{search.type = 'rf'},
this procedure is automatically performed.}

\item{extend.tail}{trhe length of the tail of the chain that should
be used to calculate the likelihood of the linakge phases}

\item{n.clusters}{Number of parallel processes to spawn}

\item{ph.thres}{the threshold used to determine if the linkage
phases compared via two-point analysis should be considered}

\item{rf.mat}{an object of class \code{mappoly.rf.matrix}.}

\item{tol}{tolerance for the C routine, i.e., the value used to
evaluate convergence in intermidiate procedures.}

\item{tol.final}{tolerance for the C routine, i.e., the value used to
evaluate convergence in the final maps that costitute marker blocks.}

\item{error}{global error rate}

\item{verbose}{if \code{FALSE} (default), simplified output is
displayed.  if \code{TRUE}, detailed output is displayed.}

\item{count.cache}{an object of class \code{cache.info} containing
pre-computed genotype frequencies, obtained with
\code{\link[mappoly]{cache_counts_twopt}}.}

\item{ask}{if \code{TRUE}, ask if the function should proceed
with the phasing and recombination fraction estimation
(if \code{reconstruct == TRUE}) after find marker blocks.}

\item{x}{an object of class \code{mappoly.bins}}

\item{...}{curentlly ignored}

\item{rf.thres}{recombination fraction threshold for plot. If \code{NULL},
all recombination fractions are plotted.}

\item{block.estimate}{logical. If TRUE returns a map forcing all
recombination fractions equal to 0 (1e-5)}
}
\value{
an object of class \code{mappoly.bins}
}
\description{
Function to allocate markers located in the same genomic region or
linkage disequilibrium blocks into bins.
}
\examples{
  \dontrun{
    hexa_file<-system.file('extdata', 'hexa_fake', package = 'mappoly')
    hexa_dat<-read_geno(file_in = hexa_file)
    all_mrk<-make_seq_mappoly(hexa_dat, 'all')
    counts_all_mrk_from_web<-cache_counts_twopt(input.seq=all_mrk,
                                                get.from.web=TRUE)
    all_pairs<-est_pairwise_rf(all_mrk, counts_all_mrk_from_web,
                               n.clusters=2)

    mat<-rf_list_to_matrix(twopt.input=all_pairs,
                           thresh.LOD.ph=10,
                           thresh.LOD.rf=10,
                           thresh.rf = 0.0005)
   plot(mat)

   blocks_rf<-find_marker_blocks(input.seq = all_mrk, search.type='rf',
                      rf.limit=0.0001, n.clusters=2, ph.thres=3,
                      rf.mat=mat, count.cache=counts_all_mrk_from_web,
                      tol=10e-3)
   blocks_rf
   plot(blocks_rf)

   blocks_seq<-find_marker_blocks(input.seq = all_mrk, search.type='seq', ph.thres=5,
                       n.clusters=2, count.cache=counts_all_mrk_from_web)
   blocks_seq
   plot(blocks_seq)

   ## Autotetraploid potato

    data("potato_solcap")
    ch1<-make_seq_mappoly(potato_solcap, 'seq1')
    counts_all_mrk_from_web<-cache_counts_twopt(ch1,
                                                get.from.web=TRUE)
    ch1_pairs<-est_pairwise_rf(ch1,
                               counts_all_mrk_from_web,
                               n.clusters=16)

    ch1_mat<- rf_list_to_matrix(twopt.input = ch1_pairs,
                                 thresh.LOD.ph = 10,
                                 thresh.LOD.rf = 10,
                                 thresh.rf = 0.001)

   ch1_blocks_rf<-find_marker_blocks(input.seq = ch1,
                                     search.type = 'rf',
                                     rf.limit = 0.0001,
                                     n.clusters = 16,
                                     ph.thres = 3,
                                     rf.mat = ch1_mat,
                                     count.cache = counts_all_mrk_from_web,
                                     tol = 10e-3,
                                     error = 0.2)
   ch1_blocks_rf
   plot(ch1_blocks_rf)

   ch1_blocks_seq<-find_marker_blocks(input.seq = ch1,
                                      search.type = 'seq',
                                      seq.limit = 10000,
                                      reconstruct = TRUE,
                                      ph.thres = 5,
                                      n.clusters = 16,
                                      count.cache = counts_all_mrk_from_web,
                                      tol = 10e-3,
                                      error = 0.2)
   ch1_blocks_seq
   plot(ch1_blocks_seq)
   }
}
\author{
Marcelo Mollinari, \email{mmollin@ncsu.edu}
}
